[{"C:\\Users\\asus\\Desktop\\collapse\\src\\index.tsx":"1","C:\\Users\\asus\\Desktop\\collapse\\src\\reportWebVitals.ts":"2","C:\\Users\\asus\\Desktop\\collapse\\src\\App.tsx":"3","C:\\Users\\asus\\Desktop\\collapse\\src\\utils\\fakeJsonGenerator.js":"4","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\ResponsiveTable.tsx":"5","C:\\Users\\asus\\Desktop\\collapse\\src\\utils\\useWindowDimensions.js":"6","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\ThemeProvider.js":"7","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\TruncatedText.tsx":"8","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\SortableTable.tsx":"9","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\ExportableTable.tsx":"10","C:\\Users\\asus\\Desktop\\collapse\\src\\utils\\ColumnSearch.js":"11","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\GroupByTable.tsx":"12","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\nestedObject.js":"13","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\GroupData.tsx":"14","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\DataTable.tsx":"15"},{"size":500,"mtime":1610185620750,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1610185620796,"results":"18","hashOfConfig":"17"},{"size":1100,"mtime":1610717334440,"results":"19","hashOfConfig":"17"},{"size":4077,"mtime":1610798639102,"results":"20","hashOfConfig":"17"},{"size":13064,"mtime":1610367681086,"results":"21","hashOfConfig":"17"},{"size":632,"mtime":1610185056780,"results":"22","hashOfConfig":"17"},{"size":2752,"mtime":1610207290217,"results":"23","hashOfConfig":"17"},{"size":583,"mtime":1610209140701,"results":"24","hashOfConfig":"17"},{"size":14427,"mtime":1610214619399,"results":"25","hashOfConfig":"26"},{"size":16369,"mtime":1610798322086,"results":"27","hashOfConfig":"17"},{"size":426,"mtime":1610361497143,"results":"28","hashOfConfig":"17"},{"size":15245,"mtime":1610693529860,"results":"29","hashOfConfig":"17"},{"size":913,"mtime":1610773739492,"results":"30","hashOfConfig":"17"},{"size":3497,"mtime":1610564921683,"results":"31","hashOfConfig":"17"},{"size":20658,"mtime":1610773911470,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"v5a7yw",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},"1jtjy9i",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"35"},"C:\\Users\\asus\\Desktop\\collapse\\src\\index.tsx",[],["69","70"],"C:\\Users\\asus\\Desktop\\collapse\\src\\reportWebVitals.ts",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\App.tsx",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\utils\\fakeJsonGenerator.js",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\ResponsiveTable.tsx",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\utils\\useWindowDimensions.js",[],["71","72"],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\ThemeProvider.js",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\TruncatedText.tsx",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\SortableTable.tsx",["73","74"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { createStyles, lighten, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\ninterface Data {\r\n    calories: number;\r\n    carbs: number;\r\n    fat: number;\r\n    name: string;\r\n    protein: number;\r\n}\r\n\r\nfunction createData(\r\n    name: string,\r\n    calories: number,\r\n    fat: number,\r\n    carbs: number,\r\n    protein: number,\r\n): Data {\r\n    return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n    createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    createData('Donut', 452, 25.0, 51, 4.9),\r\n    createData('Eclair', 262, 16.0, 24, 6.0),\r\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n    createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n    createData('KitKat', 518, 26.0, 65, 7.0),\r\n    createData('Lollipop', 392, 0.2, 98, 0.0),\r\n    createData('Marshmallow', 318, 0, 81, 2.0),\r\n    createData('Nougat', 360, 19.0, 9, 37.0),\r\n    createData('Oreo', 437, 18.0, 63, 4.0),\r\n];\r\n\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\ntype Order = 'asc' | 'desc';\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n    order: Order,\r\n    orderBy: Key,\r\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\ninterface HeadCell {\r\n    disablePadding: boolean;\r\n    id: keyof Data;\r\n    label: string;\r\n    numeric: boolean;\r\n}\r\n\r\nconst headCells: HeadCell[] = [\r\n    { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\r\n    { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\r\n    { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\r\n    { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\r\n    { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\r\n];\r\n\r\ninterface EnhancedTableProps {\r\n    classes: ReturnType<typeof useStyles>;\r\n    numSelected: number;\r\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\r\n    onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    order: Order;\r\n    orderBy: string;\r\n    rowCount: number;\r\n}\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            paddingLeft: theme.spacing(2),\r\n            paddingRight: theme.spacing(1),\r\n        },\r\n        highlight:\r\n            theme.palette.type === 'light'\r\n                ? {\r\n                    color: theme.palette.secondary.main,\r\n                    backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n                }\r\n                : {\r\n                    color: theme.palette.text.primary,\r\n                    backgroundColor: theme.palette.secondary.dark,\r\n                },\r\n        title: {\r\n            flex: '1 1 100%',\r\n        },\r\n    }),\r\n);\r\n\r\ninterface EnhancedTableToolbarProps {\r\n    numSelected: number;\r\n}\r\n\r\nconst EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                    <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                        Nutrition\r\n                    </Typography>\r\n                )}\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                    <Tooltip title=\"Filter list\">\r\n                        <IconButton aria-label=\"filter list\">\r\n                            <FilterListIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        container: {\r\n            maxHeight: 440,\r\n        },\r\n        paper: {\r\n            width: '80%',\r\n            margin:\"100px auto\"\r\n        },\r\n        table: {\r\n            minWidth: 750,\r\n        },\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function SortableTable() {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState<Order>('asc');\r\n    const [orderBy, setOrderBy] = React.useState<keyof Data>('calories');\r\n    const [selected, setSelected] = React.useState<string[]>([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof Data) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.name);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected: string[] = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <TableContainer\r\n                    className={classes.container}\r\n                >\r\n                    <Table\r\n                        stickyHeader\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={'medium'}\r\n                        aria-label=\"enhanced table\"\r\n\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.name);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.name)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.name}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\">{row.calories}</TableCell>\r\n                                            <TableCell align=\"right\">{row.fat}</TableCell>\r\n                                            <TableCell align=\"right\">{row.carbs}</TableCell>\r\n                                            <TableCell align=\"right\">{row.protein}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n",["75","76"],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\ExportableTable.tsx",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\utils\\ColumnSearch.js",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\GroupByTable.tsx",["77","78"],"import React, { ReactNode, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport fakeJsonGenerator from '../utils/fakeJsonGenerator';\r\nimport useWindowDimensions from '../utils/useWindowDimensions';\r\nimport { Autocomplete, Pagination } from '@material-ui/lab';\r\nimport TruncatedText from \"./TruncatedText\"\r\nimport { Box, Chip, Collapse, FormControlLabel, IconButton, Switch, TextField } from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport equal from \"fast-deep-equal\";\r\nimport makeNestedObject from './nestedObject';\r\nimport GroupData from './GroupData';\r\n\r\n\r\ninterface Column {\r\n    id: keyof RowData;\r\n    label: string;\r\n    align?: \"right\" | \"left\" | \"center\" | \"inherit\" | \"justify\" | undefined\r\n    minWidth?:number,\r\n    maxWidth?:number,\r\n    isNumeric?:boolean,\r\n    secondParameter?:any,\r\n    render?:(value: string | number,secondParameter?:any) => ReactNode\r\n}\r\n\r\ninterface RowData {\r\n    orderId: string,\r\n    name: string,\r\n    amount:number,\r\n    country: string,\r\n    type: string,\r\n    status: string,\r\n    address: string,\r\n    date: string,\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '80%',\r\n        margin:\"40px auto\"\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nfunction Row(props: { row: RowData,columns:Column[] }) {\r\n    const { row,columns } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const { width } = useWindowDimensions();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.orderId}>\r\n                <TableCell>\r\n                    {\r\n                        columns.length*150 > width ? (\r\n                            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                                {open ? <ArrowDropDownIcon /> : <ArrowRightIcon />}\r\n                            </IconButton>\r\n                        ) : \"\"\r\n                    }\r\n                </TableCell>\r\n                {columns.map((column,i) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                        (i+1)*150 <width ?\r\n                        <TableCell key={column.id} align={column.align}>\r\n                            {\r\n                                    !!column.render ? column.render(value, column.secondParameter ? column.secondParameter : undefined) : value\r\n                            }\r\n                        </TableCell> : \"\"\r\n                    );\r\n                })}\r\n            </TableRow>\r\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={Math.floor((columns.length/2) +1)}>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                    <Box>\r\n                        <Table size=\"small\" aria-label=\"purchases\" >                 \r\n                            <TableBody>\r\n                                    {columns.map((column,i) => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            (i+1)*150 >= width ? (\r\n                                                <TableRow key={column.id} >\r\n                                                    <TableCell>\r\n                                                        {column.label}\r\n                                                    </TableCell>\r\n                                                    <TableCell align={\"left\"}>\r\n                                                        {\r\n                                                            typeof value === \"string\" && value.length > 40 ? <TruncatedText text={value} /> : !!column.render ? column.render(value, column.secondParameter ? column.secondParameter : undefined) : value\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ) : \"\"\r\n                                        );\r\n                                    })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Box>\r\n                </Collapse>\r\n            </TableCell>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst doesSearchValueExists = (row:RowData, searchValue:string) => {\r\n    let rowItems = Object.values(row).map(item => item.toString());\r\n    const regex = new RegExp(searchValue.toString(), 'gi')\r\n    return rowItems.some(e => typeof e === \"string\" && e.match(regex))       \r\n}\r\n\r\nexport default function GroupByTable() {\r\n    const classes = useStyles();\r\n    const { width } = useWindowDimensions();\r\n    const [rows, setRows] = useState<RowData[]>([]);\r\n    const [columns, setColumns] = useState<Column[]>([\r\n        { id: 'orderId', label: 'OrderId' },\r\n        { id: 'name', label: 'Name', },\r\n        { id: 'amount', label: 'Amount', isNumeric: true, render: (value) => <span style={{ color: \"#009BE5\" }}>US${value} </span> },\r\n        {\r\n            id: 'date',\r\n            label: 'Date',\r\n            align: 'right',\r\n        },\r\n        {\r\n            id: \"address\",\r\n            label: 'Address',\r\n            minWidth: 50,\r\n            maxWidth: 100,\r\n            align: 'left',\r\n            render: (value) => typeof value === \"string\" && value.length > 40 ? <TruncatedText text={value} /> : value\r\n        },\r\n        {\r\n            id: \"country\",\r\n            label: 'Country',\r\n            align: 'left',\r\n        },\r\n        {\r\n            id: \"status\",\r\n            label: 'Status',\r\n            align: 'center',\r\n            secondParameter: {\r\n                Danger: \"#E21717\",\r\n                Pending: \"#207398\",\r\n                Success: \"#3DBE29\",\r\n                Cancelled: \"#758283\",\r\n                Info: \"#E07C24\",\r\n            },\r\n            render: (value, colors) => <Chip label={value} style={{\r\n                backgroundColor: colors ? colors[value] : \"\",\r\n                color: \"white\"\r\n            }} size=\"small\" />\r\n        },\r\n        {\r\n            id: \"type\",\r\n            label: 'Type',\r\n            align: 'center',\r\n            secondParameter: {\r\n                \"Online\": \"#3DBE29\",\r\n                \"Retail\": \"#E07C24\",\r\n                \"Direct\": \"#758283\"\r\n            },\r\n            render: (value, colors) => (<span\r\n                style={{ color: colors[value] }}\r\n            >\r\n                {value}\r\n            </span>)\r\n        },\r\n    ])\r\n    const [rowsAfterFiltered, setRowsAfterFiltered] = useState<RowData[]>([]);\r\n    const [rowsAfterGrouped, setRowsAfterGrouped] = useState<RowData[]>([]);\r\n    const [columnsForMapping, setColumnsForMapping] = useState<Column[]>([]);\r\n    const [searchValue, setSearchValue] = useState<string>(\"\");\r\n    const [groupByHeaders, setGroupByHeaders] = useState<Column[]>([]);\r\n    const [isGroupingEnabled, setIsGroupingEnabled] = useState<boolean>(false);\r\n    const [isExpandAllEnabled, setIsExpandAllEnabled] = useState<boolean>(false);\r\n    const [page, setPage] = useState(1);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    useEffect(() => {\r\n        setRows(fakeJsonGenerator(100))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if(searchValue.trim()){\r\n            setRowsAfterFiltered(rows.filter(row => doesSearchValueExists(row, searchValue)))\r\n        }else{\r\n            setRowsAfterFiltered(rows);\r\n        }\r\n    },[searchValue,rows])\r\n\r\n    useEffect(() => {\r\n        if(isGroupingEnabled){\r\n             setRowsAfterGrouped(makeNestedObject(groupByHeaders.map(column => column.id),0,rowsAfterFiltered));\r\n        }\r\n    }, [isGroupingEnabled,groupByHeaders,rowsAfterFiltered])\r\n\r\n    useEffect(() => {\r\n        if(groupByHeaders.length){\r\n            setIsGroupingEnabled(true)\r\n            let newColumns = [...groupByHeaders];\r\n            columns.forEach(column=> {\r\n                let isAlreadyIncluded = false\r\n                for(let selectedColumn of newColumns){\r\n                    if(equal(column,selectedColumn)){\r\n                        isAlreadyIncluded = true\r\n                        break\r\n                    }\r\n                }\r\n                if(!isAlreadyIncluded){\r\n                    newColumns.push(column)\r\n                }\r\n            })\r\n            setColumnsForMapping(newColumns);\r\n        } else {\r\n        setIsGroupingEnabled(false)\r\n        setColumnsForMapping(columns);\r\n        }\r\n    }, [groupByHeaders,columns])\r\n\r\n    return (\r\n        <Paper className={classes.root} style={{\r\n                width: width < 600 ?\"98%\" :undefined \r\n            }} \r\n        >\r\n            <div style={{ padding: \"20px\", display: \"flex\", flexDirection: width < 700 ? \"column\" : \"row\"}}>\r\n                <Autocomplete\r\n                    multiple\r\n                    id=\"headers-autocomplete\"\r\n                    style={{\r\n                        width: width < 700 ? \"100%\" : \"80%\",\r\n                        margin: width < 700 ? \"5px\" : \"10px\"\r\n                    }}\r\n                    value={groupByHeaders}\r\n                    onChange={(e,v) => {\r\n                        setGroupByHeaders(v);\r\n                    }}\r\n                    limitTags={3}\r\n                    options={columns}\r\n                    getOptionLabel={(option:Column) => option.label}\r\n                    filterSelectedOptions\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"outlined\"\r\n                            label=\"Group By Headers\"\r\n                            placeholder=\"Select Header\"\r\n                        />\r\n                    )}\r\n                    renderTags={(value, getTagProps) =>\r\n                        value.map((option, index) => (\r\n                            <Chip\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            label={option.label}\r\n                                {...getTagProps({ index })}\r\n                            />\r\n                        ))\r\n                    }\r\n                />\r\n                <TextField style={{ width: width < 700 ? \"100%\" : \"20%\", margin: width < 700 ? \"5px\" : \"10px\" }} id=\"Search-Bar\" label=\"Search\" variant=\"outlined\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    height:\"50px\"\r\n                }}\r\n            >\r\n                {\r\n                    isGroupingEnabled ? (\r\n                        <FormControlLabel\r\n                            style={{\r\n                                padding: \"0 30px\"\r\n                            }}\r\n                            control={<Switch checked={isExpandAllEnabled} onChange={() => setIsExpandAllEnabled(prev => !prev)} name=\"checkedA\" />}\r\n                            label=\"Expand All\"\r\n                        />\r\n                    ) : \"\"\r\n                }\r\n            </div>\r\n            <TableContainer >\r\n                <Table aria-label=\"Data table\">\r\n                    <TableHead>\r\n                        <TableRow >\r\n                            {\r\n                                isGroupingEnabled ? \"\" : (\r\n                                    <TableCell\r\n                                        align={\"left\"}\r\n                                        style={{\r\n                                            backgroundColor: \"#009be5\",\r\n                                            color: \"white\"\r\n                                        }}\r\n                                    >\r\n                                        #\r\n                                    </TableCell>\r\n                                )\r\n                            }\r\n                            \r\n                            {columnsForMapping.map((column,i) => (\r\n                                <>\r\n                                {\r\n                                    (i+1)*150 < width ? (\r\n                                            <TableCell\r\n                                                key={column.id}\r\n                                                align={isGroupingEnabled ? \"left\" : column.align ? column.align : \"center\"}\r\n                                                style={{\r\n                                                    minWidth: column.minWidth,\r\n                                                    maxWidth: column.maxWidth,\r\n                                                    backgroundColor: \"#009be5\",\r\n                                                    color: \"white\"\r\n                                                }}\r\n                                            >\r\n                                                {column.label}\r\n                                            </TableCell>\r\n                                    ) : \"\"\r\n                                }\r\n                                \r\n                                </>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <>\r\n                            {\r\n                                !isGroupingEnabled ? (\r\n                                    <>\r\n                                    {\r\n                                        rowsAfterFiltered.map(\r\n                                            (row, i) =>\r\n                                                <Row row={row} key={i} columns={columnsForMapping} />\r\n                                        )\r\n                                    }  \r\n                                    </>\r\n                                ) : (\r\n                                    <TableCell colSpan={columns.length+1} >\r\n                                        <GroupData data={rowsAfterGrouped} columns={columnsForMapping} index={0} isExpandAllEnabled={isExpandAllEnabled} />     \r\n                                    </TableCell>\r\n                                )\r\n                            }\r\n                        </>\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <div \r\n                style={{\r\n                    padding:\"20px\"\r\n                }}\r\n            >\r\n                <Pagination page={page} count={Math.ceil((rowsAfterFiltered.length) / rowsPerPage)} onChange={(e, p) => {\r\n                    setPage(p)\r\n                }} showFirstButton={width > 400} showLastButton={width > 400} variant=\"text\" color=\"primary\" shape=\"rounded\" />\r\n            </div>            \r\n        </Paper>\r\n    );\r\n}\r\n","C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\nestedObject.js",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\GroupData.tsx",[],"C:\\Users\\asus\\Desktop\\collapse\\src\\Components\\DataTable.tsx",["79","80"],"import React, { ReactNode, useEffect, useState,useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport fakeJsonGenerator from '../utils/fakeJsonGenerator';\r\nimport useWindowDimensions from '../utils/useWindowDimensions';\r\nimport { Autocomplete, Pagination } from '@material-ui/lab';\r\nimport TruncatedText from \"./TruncatedText\"\r\nimport { Box, Chip, Collapse, FormControl, FormControlLabel, IconButton, InputLabel, MenuItem, Select, Switch, TextField } from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport equal from \"fast-deep-equal\";\r\nimport makeNestedObject from './nestedObject';\r\nimport GroupData from './GroupData';\r\nimport CsvDownload from 'react-json-to-csv';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport ReactToPrint from 'react-to-print';\r\nconst { jsPDF } = require('jspdf');\r\nrequire('jspdf-autotable');\r\n\r\n\r\ninterface Column {\r\n    id: keyof RowData;\r\n    label: string;\r\n    align?: \"right\" | \"left\" | \"center\" | \"inherit\" | \"justify\" | undefined\r\n    minWidth?:number,\r\n    maxWidth?:number,\r\n    isNumeric?:boolean,\r\n    secondParameter?:any,\r\n    render?:(value: string | number,secondParameter?:any) => ReactNode\r\n}\r\n\r\ninterface RowData {\r\n    orderId: string,\r\n    name: string,\r\n    amount:number,\r\n    country: string,\r\n    type: string,\r\n    status: string,\r\n    address: string,\r\n    date: string,\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '80%',\r\n        margin:\"40px auto\"\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst searchByColumn = (rows:any, searchObject:any) => {\r\n    let columnsToSearch = Object.keys(searchObject).filter(\r\n        (value) => !!searchObject[value].trim()\r\n    );\r\n    return rows.filter((row:any) =>\r\n        columnsToSearch.every((column) => {\r\n            let regex = new RegExp(\r\n                searchObject[column].toString().split(\"\\\\\").join(\"\"),\r\n                \"gi\"\r\n            );\r\n            return row[column].toString().match(regex);\r\n        })\r\n    );\r\n};\r\n\r\n\r\nfunction Row(props: { row: RowData, columns: Column[], expandAll: boolean }) {\r\n    const { row,columns,expandAll } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const { width } = useWindowDimensions();\r\n\r\n    useEffect(() => {\r\n        setOpen(expandAll)\r\n    }, [expandAll])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.orderId}>\r\n                <TableCell>\r\n                    {\r\n                        columns.length*150 > width ? (\r\n                            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                                {open ? <ArrowDropDownIcon /> : <ArrowRightIcon />}\r\n                            </IconButton>\r\n                        ) : \"\"\r\n                    }\r\n                </TableCell>\r\n                {columns.map((column,i) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                        (i+1)*150 <width ?\r\n                        <TableCell key={column.id} align={column.align}>\r\n                            {\r\n                                    !!column.render ? column.render(value, column.secondParameter ? column.secondParameter : undefined) : value\r\n                            }\r\n                        </TableCell> : \"\"\r\n                    );\r\n                })}\r\n            </TableRow>\r\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={Math.floor((columns.length/2) +1)}>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                    <Box>\r\n                        <Table size=\"small\" aria-label=\"purchases\" >                 \r\n                            <TableBody>\r\n                                    {columns.map((column,i) => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            (i+1)*150 >= width ? (\r\n                                                <TableRow key={column.id} >\r\n                                                    <TableCell>\r\n                                                        {column.label}\r\n                                                    </TableCell>\r\n                                                    <TableCell align={\"left\"}>\r\n                                                        {\r\n                                                            typeof value === \"string\" && value.length > 40 ? <TruncatedText text={value} /> : !!column.render ? column.render(value, column.secondParameter ? column.secondParameter : undefined) : value\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ) : \"\"\r\n                                        );\r\n                                    })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Box>\r\n                </Collapse>\r\n            </TableCell>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst doesSearchValueExists = (row:RowData, searchValue:string) => {\r\n    let rowItems = Object.values(row).map(item => item.toString());\r\n    const regex = new RegExp(searchValue.toString(), 'gi')\r\n    return rowItems.some(e => typeof e === \"string\" && e.match(regex))       \r\n}\r\n\r\nexport default function GroupByTable() {\r\n    const classes = useStyles();\r\n    const { width } = useWindowDimensions();\r\n    const [rows, setRows] = useState<RowData[]>([]);\r\n    const [columns, setColumns] = useState<Column[]>([\r\n        { id: 'orderId', label: 'OrderId' },\r\n        { id: 'name', label: 'Name', },\r\n        { id: 'amount', label: 'Amount', isNumeric: true, render: (value) => <span style={{ color: \"#009BE5\" }}>US${value} </span> },\r\n        {\r\n            id: 'date',\r\n            label: 'Date',\r\n            align: 'right',\r\n        },\r\n        {\r\n            id: \"address\",\r\n            label: 'Address',\r\n            minWidth: 50,\r\n            maxWidth: 100,\r\n            align: 'left',\r\n            render: (value) => typeof value === \"string\" && value.length > 40 ? <TruncatedText text={value} /> : value\r\n        },\r\n        {\r\n            id: \"country\",\r\n            label: 'Country',\r\n            align: 'left',\r\n        },\r\n        {\r\n            id: \"status\",\r\n            label: 'Status',\r\n            align: 'center',\r\n            secondParameter: {\r\n                Danger: \"#E21717\",\r\n                Pending: \"#207398\",\r\n                Success: \"#3DBE29\",\r\n                Cancelled: \"#758283\",\r\n                Info: \"#E07C24\",\r\n            },\r\n            render: (value, colors) => <Chip label={value} style={{\r\n                backgroundColor: colors ? colors[value] : \"\",\r\n                color: \"white\"\r\n            }} size=\"small\" />\r\n        },\r\n        {\r\n            id: \"type\",\r\n            label: 'Type',\r\n            align: 'center',\r\n            secondParameter: {\r\n                \"Online\": \"#3DBE29\",\r\n                \"Retail\": \"#E07C24\",\r\n                \"Direct\": \"#758283\"\r\n            },\r\n            render: (value, colors) => (<span\r\n                style={{ color: colors[value] }}\r\n            >\r\n                {value}\r\n            </span>)\r\n        },\r\n    ])\r\n    const [rowsAfterFiltered, setRowsAfterFiltered] = useState<RowData[]>([]);\r\n    const [rowsAfterGrouped, setRowsAfterGrouped] = useState<RowData[]>([]);\r\n    const [columnsForMapping, setColumnsForMapping] = useState<Column[]>([]);\r\n    const [groupByHeaders, setGroupByHeaders] = useState<Column[]>([]);\r\n    const [isGroupingEnabled, setIsGroupingEnabled] = useState<boolean>(false);\r\n    const [page, setPage] = useState(1);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [expandAll, setExpandAll] = useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const [searchObject, setSearchObject] = useState<any>({\r\n        orderId: \"\",\r\n        name: \"\",\r\n        amount: \"\",\r\n        country: \"\",\r\n        type: \"\",\r\n        status: \"\",\r\n        address: \"\",\r\n        date: \"\",\r\n    });\r\n    const tableRef = useRef(null)\r\n\r\n    const exportPDF = (rows: RowData[]) => {\r\n        if (jsPDF !== null) {\r\n            let content = {\r\n                startY: 20,\r\n                head: [columns.map(column => column.id)],\r\n                body: rows.map(row => Object.values(row))\r\n            }\r\n            const doc = new jsPDF(\"landscape\", \"pt\", \"A4\");\r\n            doc.setFontSize(15);\r\n            doc.text(\"Orders Data\", 40, 40);\r\n            doc.autoTable(content);\r\n            doc.save(\"Data-table.pdf\");\r\n        } else {\r\n            console.log(\"its null yaar\")\r\n        }\r\n    }\r\n\r\n    const handleRowsPerPageChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setRowsPerPage(event.target.value as number);\r\n        setPage(1)\r\n    };\r\n\r\n    const handleMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setRows(fakeJsonGenerator(50000))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        setPage(1)\r\n        if (Object.values(searchObject).some(value => typeof value === \"string\" && !!value.trim())) {\r\n            let tempFilteredRows: RowData[] = searchByColumn(rows, searchObject)\r\n            setRowsAfterFiltered(tempFilteredRows);\r\n        } else {\r\n            setRowsAfterFiltered(rows)\r\n        }\r\n    }, [searchObject, rows, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        if(isGroupingEnabled){\r\n            setRowsAfterGrouped(makeNestedObject(groupByHeaders.map(column => column.id), 0, rowsAfterFiltered.slice((page - 1) * rowsPerPage, page * rowsPerPage)));\r\n        }\r\n    }, [isGroupingEnabled,groupByHeaders,rowsAfterFiltered,page,rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        if(groupByHeaders.length){\r\n            setIsGroupingEnabled(true)\r\n            let newColumns = [...groupByHeaders];\r\n            columns.forEach(column=> {\r\n                let isAlreadyIncluded = false\r\n                for(let selectedColumn of newColumns){\r\n                    if(equal(column,selectedColumn)){\r\n                        isAlreadyIncluded = true\r\n                        break\r\n                    }\r\n                }\r\n                if(!isAlreadyIncluded){\r\n                    newColumns.push(column)\r\n                }\r\n            })\r\n            setColumnsForMapping(newColumns);\r\n        } else {\r\n        setIsGroupingEnabled(false)\r\n        setColumnsForMapping(columns);\r\n        }\r\n    }, [groupByHeaders,columns])\r\n\r\n    return (\r\n        <Paper className={classes.root} style={{\r\n                width: width < 600 ?\"98%\" :undefined \r\n            }} \r\n        >\r\n            <div style={{ padding: \"20px\", display: \"flex\", flexDirection: width < 700 ? \"column\" : \"row\"}}>\r\n                <Autocomplete\r\n                    multiple\r\n                    id=\"headers-autocomplete\"\r\n                    style={{\r\n                        width:\"100%\",\r\n                    }}\r\n                    value={groupByHeaders}\r\n                    onChange={(e,v) => {\r\n                        setGroupByHeaders(v);\r\n                    }}\r\n                    limitTags={3}\r\n                    options={columns}\r\n                    getOptionLabel={(option:Column) => option.label}\r\n                    filterSelectedOptions\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            variant=\"outlined\"\r\n                            label=\"Group By Headers\"\r\n                            placeholder=\"Select Header\"\r\n                        />\r\n                    )}\r\n                    renderTags={(value, getTagProps) =>\r\n                        value.map((option, index) => (\r\n                            <Chip\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            label={option.label}\r\n                                {...getTagProps({ index })}\r\n                            />\r\n                        ))\r\n                    }\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\"\r\n                }}\r\n            >\r\n                <div\r\n                    style={{ width: \"120px\", margin: \"20px\" }}\r\n                >\r\n                    <FormControl variant=\"outlined\" style={{ width: \"120px\" }}>\r\n                        <InputLabel id=\"Rows-Per-Page-Select-label\" >Display</InputLabel>\r\n                        <Select\r\n                            labelId=\"Rows-Per-Page-Select-label\"\r\n                            id=\"rows-per-page-select\"\r\n                            label=\"Display\"\r\n                            value={rowsPerPage}\r\n                            onChange={handleRowsPerPageChange}\r\n                            fullWidth\r\n                            margin=\"dense\"\r\n                        >\r\n                            <MenuItem value={10}>10 Rows</MenuItem>\r\n                            <MenuItem value={20}>20 Rows</MenuItem>\r\n                            <MenuItem value={50}>50 Rows</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={expandAll} onChange={() => setExpandAll(prev => !prev)} />}\r\n                        label=\"Expand\"\r\n                    />\r\n                </div>\r\n\r\n                <Pagination\r\n                    style={{\r\n                        display: width < 800 ? \"none\" : \"\"\r\n                    }}\r\n                    page={page}\r\n                    count={Math.ceil((rowsAfterFiltered.length) / rowsPerPage)}\r\n                    onChange={(e, p) => setPage(p)}\r\n                    variant=\"text\"\r\n                    color=\"primary\"\r\n                    shape=\"rounded\"\r\n                />\r\n                <IconButton\r\n                    aria-label=\"more\"\r\n                    aria-controls=\"long-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleMenuClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                    id=\"long-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={() => setAnchorEl(null)}\r\n                >\r\n                    <CsvDownload data={rowsAfterFiltered} style={{\r\n                        backgroundColor: \"white\",\r\n                        border: \"none\",\r\n                        outline: \"none\",\r\n                        width: \"100%\",\r\n                        padding: 0,\r\n                        margin: 0\r\n                    }} >\r\n                        <MenuItem>\r\n                            Export CSV\r\n                        </MenuItem>\r\n                    </CsvDownload>\r\n                    <MenuItem\r\n                        onClick={() => {\r\n                            exportPDF(rowsAfterFiltered);\r\n                        }}\r\n                    >\r\n                        Export PDF\r\n                    </MenuItem>\r\n                    <ReactToPrint\r\n                        trigger={() => {\r\n                            return (\r\n                                <MenuItem\r\n                                >\r\n                                    Print Page\r\n                                </MenuItem>\r\n                            );\r\n                        }}\r\n                        content={() => tableRef.current}\r\n                        pageStyle={\"padding:20px\"}\r\n                    />\r\n                </Menu>\r\n            </div>\r\n            <Pagination\r\n                style={{\r\n                    display: width > 800 ? \"none\" : \"\",\r\n                    padding: \"10px\"\r\n                }}\r\n                page={page}\r\n                count={Math.ceil((rowsAfterFiltered.length) / rowsPerPage)}\r\n                onChange={(e, p) => setPage(p)}\r\n                variant=\"text\"\r\n                color=\"primary\"\r\n                shape=\"rounded\"\r\n                size={width < 400 ? \"small\" : \"medium\"}\r\n            />\r\n            <TableContainer >\r\n                <Table aria-label=\"Data table\" ref={tableRef}>\r\n                    <TableHead>\r\n                        <TableRow >\r\n                            {\r\n                                isGroupingEnabled ? \"\" : (\r\n                                    <TableCell\r\n                                        align={\"left\"}\r\n                                    >\r\n                                        #\r\n                                    </TableCell>\r\n                                )\r\n                            }\r\n                            \r\n                            {columnsForMapping.map((column,i) => (\r\n                                <>\r\n                                {\r\n                                    (i+1)*150 < width ? (\r\n                                            <TableCell\r\n                                                key={column.id}\r\n                                                align={\"center\"}\r\n                                                style={{\r\n                                                    minWidth: column.minWidth,\r\n                                                    maxWidth: column.maxWidth,\r\n                                                }}\r\n                                            >\r\n                                                {column.label}\r\n                                                <TextField variant=\"outlined\" margin=\"dense\" value={searchObject[column.id]} onChange={(e) => {\r\n                                                    e.persist();\r\n                                                    if (e.target && e.target.value) {\r\n                                                        setSearchObject((prev: any) => ({ ...prev, [column.id]: e.target.value }))\r\n                                                    } else {\r\n                                                        setSearchObject((prev: any) => ({ ...prev, [column.id]: \"\" }))\r\n                                                    }\r\n                                                }} />\r\n                                            </TableCell>\r\n                                    ) : \"\"\r\n                                }\r\n                                \r\n                                </>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <>\r\n                            {\r\n                                !isGroupingEnabled ? (\r\n                                    <>\r\n                                    {\r\n                                            rowsAfterFiltered.slice((page - 1) * rowsPerPage, page * rowsPerPage).map(\r\n                                            (row, i) =>\r\n                                                <Row row={row} key={i} columns={columnsForMapping} expandAll={expandAll} />\r\n                                        )\r\n                                    }  \r\n                                    </>\r\n                                ) : (\r\n                                    <TableCell colSpan={columns.length+1} >\r\n                                        <GroupData data={rowsAfterGrouped} columns={columnsForMapping} index={0} isExpandAllEnabled={expandAll} />     \r\n                                    </TableCell>\r\n                                )\r\n                            }\r\n                        </>\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>           \r\n        </Paper>\r\n    );\r\n}\r\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":18,"column":8,"nodeType":"87","messageId":"88","endLine":18,"endColumn":24},{"ruleId":"85","severity":1,"message":"89","line":19,"column":8,"nodeType":"87","messageId":"88","endLine":19,"endColumn":14},{"ruleId":"81","replacedBy":"90"},{"ruleId":"83","replacedBy":"91"},{"ruleId":"85","severity":1,"message":"92","line":124,"column":21,"nodeType":"87","messageId":"88","endLine":124,"endColumn":31},{"ruleId":"85","severity":1,"message":"93","line":186,"column":25,"nodeType":"87","messageId":"88","endLine":186,"endColumn":39},{"ruleId":"85","severity":1,"message":"94","line":140,"column":7,"nodeType":"87","messageId":"88","endLine":140,"endColumn":28},{"ruleId":"85","severity":1,"message":"92","line":150,"column":21,"nodeType":"87","messageId":"88","endLine":150,"endColumn":31},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"@typescript-eslint/no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.",["95"],["96"],"'setColumns' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","'doesSearchValueExists' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]